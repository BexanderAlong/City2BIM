using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//embed BimGisCad
using BimGisCad.Representation.Geometry;

//embed Xbim                                    //below selected examples that show why these are included
using Xbim.Ifc;                                 //IfcStore
using Xbim.Ifc4.GeometricConstraintResource;    //IfcLocalPlacement
using Xbim.Ifc4.GeometryResource;               //IfcAxis2Placement3D

using BIMGISInteropLibs.Logging;                                 //need for LogPair
using LogWriter = BIMGISInteropLibs.Logging.LogWriterIfcTerrain; //to set log messages

namespace BIMGISInteropLibs.IFC.Ifc4.LoGeoRef
{
    public static class Level30
    {
        /// <summary>
        /// Creates the placement that will be used in the Ifc file <para/>
        /// Using concept LoGeoRef30<para/>
        /// </summary>
        /// <param name="model">Location for all information that will be inserted into the IFC file</param>
        /// <param name="placement">placement generated by BimGisCad Bib</param>
        /// <returns>IfcLocalPlacement (references IfcAxis2Placement3D (IfcCartesianPoint and 2x IfcDirection)</returns>
        public static IfcLocalPlacement Create(IfcStore model, Axis2Placement3D placement)
        {
            LogWriter.Add(LogType.verbose, "Create IFCLocalPlacement ...");

            //local placment as instance
            var lp = model.Instances.New<IfcLocalPlacement>(
                l => l.RelativePlacement =
                
                //create IfcAxis2Placement3D
                model.Instances.New<IfcAxis2Placement3D>(p =>
                {
                    //create IfcCartesianPoint by setting x y z
                    p.Location = model.Instances.New<IfcCartesianPoint>(c => c.SetXYZ(placement.Location.X, placement.Location.Y, placement.Location.Z));
                    LogWriter.Add(LogType.verbose, "IfcCartesianPoint (Easting: "+p.Location.X + "; Northing: " + p.Location.Y  +"; Height: "+ p.Location.Z + ") set!" );

                    //create IfcDirection - Axis
                    p.Axis = model.Instances.New<IfcDirection>(a => a.SetXYZ(placement.Axis.X, placement.Axis.Y, placement.Axis.Z));
                    LogWriter.Add(LogType.verbose, "IfcDirection - Axis (Easting: " + p.Axis.X + "; Northing: " + p.Axis.Y + "; Height: " + p.Axis.Z + ") set!");

                    //create IfcDirection - RefDir
                    p.RefDirection = model.Instances.New<IfcDirection>(d => d.SetXYZ(placement.RefDirection.X, placement.RefDirection.Y, placement.RefDirection.Z));
                    LogWriter.Add(LogType.verbose, "IfcDirection - refDirection (Easting: " + p.RefDirection.X + "; Northing: " + p.RefDirection.Y + "; Height: " + p.RefDirection.Z + ") set!");
                }));
            
            //logging
            LogWriter.Add(LogType.debug, "IfcLocalPlacment set.");

            return lp;
        }
    }
}
