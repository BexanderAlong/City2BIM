using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//embed BimGisCad
using BimGisCad.Representation.Geometry;

//embed Xbim                                    //below selected examples that show why these are included
using Xbim.Ifc;                                 //IfcStore
using Xbim.Ifc4.GeometricConstraintResource;    //IfcLocalPlacement
using Xbim.Ifc4.GeometryResource;               //IfcAxis2Placement3D

namespace BIMGISInteropLibs.IFC.Ifc4
{
    public static class LocalPlacement
    {
        /// <summary>
        /// Creates the placement that will be used in the Ifc file
        /// </summary>
        /// <param name="model">Location for all information that will be inserted into the IFC file</param>
        /// <param name="placement">placement generated by BimGisCad Bib</param>
        /// <returns>IfcLocalPlacement (references IfcAxis2Placement3D (IfcCartesianPoint and 2x IfcDirection)</returns>
        public static IfcLocalPlacement Create(IfcStore model, Axis2Placement3D placement)
        {
            var lp = model.Instances.New<IfcLocalPlacement>(l => l.RelativePlacement =
                model.Instances.New<IfcAxis2Placement3D>(p =>
                {
                    p.Location = model.Instances.New<IfcCartesianPoint>(c => c.SetXYZ(placement.Location.X, placement.Location.Y, placement.Location.Z));
                    p.RefDirection = model.Instances.New<IfcDirection>(d => d.SetXYZ(placement.RefDirection.X, placement.RefDirection.Y, placement.RefDirection.Z));
                    p.Axis = model.Instances.New<IfcDirection>(a => a.SetXYZ(placement.Axis.X, placement.Axis.Y, placement.Axis.Z));
                }));
            return lp;
        }
    }
}
